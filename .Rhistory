if (a<b && a<c){
min = a
}else if (b<a && b<c){
min = b
}else{
min=c
}
return(min)
}
Minimum(0,-2,7)
Minimum(5,1,9)
Minimum(12,50,75)
Name<- c("zhraa","Ahmed","Shaaban","Abdelaziz","Abdelrahman")
Age<- c(21,40,50,54,30)
Status<- c("Single","Married","Married","Married","Single")
df <-data.frame(Name,Age,Status)
View(df)
print(summary(df))
v1 <- c(1,2,3,4,5)
v2 <-c(6,7,8,9,10)
merge <- c(v1,v2)
print(merge)
x=4
print(as.character(x))
x=4
print(as.character(x))
print(typeof(x))
x=4
print(as.character(x))
print(typeof(x))
geneder <- c("f","m","m","m","f")
fgender <- factor(geneder)
levels(fgender)<- C("Female","Male")
geneder <- c("f","m","m","m","f")
fgender <- factor(geneder)
levels(fgender)<- C("Female","Male","Male","Male","Female")
#levels
geneder <- c("f","m","m","m","f")
fgender <- factor(geneder)
levels(fgender)<- C("Female","Male")
geneder <- c("f","m","m","m","f")
fgender <- factor(geneder)
print(fgender)
geneder <- c("f","m","m","m","f")
fgender <- factor(geneder)
print(fgender)
levels(fgender)<- C("Female","Male")
evels(fgender)<- C("Female","Male")
fgender <- factor(geneder)
print(fgender)
levels(fgender)<- C("Female","Male")
levels(fgender) <- c("Female","Male")
geneder <- c("f","m","m","m","f")
fgender <- factor(geneder)
print(fgender)
levels(fgender) <- c("Female","Male")
na.rm(df$Age)
#exercise 5.33
Name<- c("zhraa","Ahmed","Shaaban","Abdelaziz","Abdelrahman")
Age<- c(21,40,50,54,30)
Status<- c("Single","Married","Married","Married","Single")
df <-data.frame(Name,Age,Status)
View(df)
companies<- read.csv("companies")
getwd()
#===================================================================================
#lec5
companies<- read.csv("companies.csv")
companies<- read.csv("companies.csv",na.strings = c(''))
View(companies)
companies<- read.csv("companies.csv",na.strings = c(''))
View(companies)
complete.cases(companies)
companies<- read.csv("companies.csv",na.strings = c(''))
View(companies)
complete.cases(companies)
companies[!complete.cases(companies),]
test <- factor(c('11','12','13','14'))
test <- as.numeric(test)
test
test <- factor(c('11','12','13','14'))
test <- as.numeric(as.character(test))
test
companies$Expenses <- gsub("Dollars",'',companies$Expenses)
companies$Expenses <- gsub("Dollars",'',companies$Expenses)
companies$Expenses<- gsub(",",'',companies$Expenses)
str(companies)
companies$Expenses <- as.numeric(companies$Expenses)
companies$Revenue <- gsub("\\$",'',companies$Revenue)
companies$Revenue<- gsub(",",'',companies$Revenue)
companies$Revenue<- as.numeric(companies$Revenue)
install.package("mice")
install.packages("mice")
library(mice)
data("nhanes2")
View(data("nhanes2"))
View(myData)
myData <- nhanes2
View(myData)
pre.imputation <- mice(myData, m=5,meth=c('','pmm','logreg','polyreg'),maxit=20)
pre.imputation$imp
pre.imputation <- mice(myData, m=5,meth=c('','pmm','logreg','polyreg'),maxit=20)
pre.imputation <- mice(companies, m=5,meth=c('','pmm','logreg','polyreg'),maxit=20)
str(myData)
pre.imputation <- mice(companies, m=5,meth=c('polyreg','pmm','logreg',''),maxit=20)
pre.imputation <- mice(myData, m=5,meth=c('polyreg','pmm','logreg',''),maxit=20)
pre.imputation$imp
pre.imputation <- mice(myData, m=5,meth=c('polyreg','pmm','logreg','pmm'),maxit=20)
pre.imputation <- mice(myData, m=5,meth=c('polyreg','pmm','logreg','pmm'),maxit=20)
pre.imputation$imp
myNew <- complete(myData,5)
rlang::last_trace()
myNew <- complete(pre.imputation,5)
pre.imputation
myNew <- complete(pre.imputation,2)
pre.imputation
myNew <- complete(pre.imputation,2)
pre.imputation
pre.imputation <- mice(myData, m=2,meth=c('polyreg','pmm','logreg','pmm'),maxit=20)
pre.imputation <- mice(myData, m=2,meth=c('polyreg','pmm','logreg','pmm'),maxit=20)
pre.imputation$imp
str(myData)
myNew <- complete(pre.imputation,2)
pre.imputation
View(pre.imputation)
#================================================================
#lec 6
is.na(myData)
is.na(myData$age)
View(myData)
is.na(myData$chl)
any(is.na(myData$chl))
missingExp<- myData[is.na(myData$chl),]
View(missingExp)
missingExp<- myData[,is.na(myData$chl)]
noNull<- myData[!(is.na(myData$chl)),]
View(noNull)
missingExp <- myData[is.na(myData$chl)&& myData$age=='20-39',]
missingExp <- companies[is.na(companies$State)&& companies$City=='New York',]
missingExp <- companies[is.na(companies$State)&companies$City=='New York',]
View(missingExp)
companies[is.na(companies$State)&companies$City=='New York','State']='NY'
View(missingExp)
companies[is.na(companies$State)&companies$City=='New York','State']='NY'
View(missingExp)
new<-companies[is.na(companies$State)&companies$City=='New York','State']='NY'
new <- companies[is.na(companies$State)&companies$City=='New York','State']='NY'
View(companies)
install.packages("tidyr")
med<- companies[companies$Industry=='Software','Employees']
View(med)
data <- airquality
clean <- drop-na(data)
clean <- drop.na(data)
clean <- drop_na(data)
x<- mean(clean$Ozone)
View(clean)
clean <- airquality
View(clean)
x<- mean(clean$Ozone)
clean$quality <- as.factor(ifelse(clean$Ozone> x,"Bad","Good"))
x<- mean(clean$Ozone)
clean$quality <- as.factor(ifelse(clean$Ozone> x,"Bad","Good"))
View(clean)
x<- mean(clean$Ozone,na.rm = T)
clean$quality <- as.factor(ifelse(clean$Ozone> x,"Bad","Good"))
View(clean)
# cal median of Employees var
med <- median(companies[,'Employess'],na.rm=T)
# cal median of Employees var
med <- median(companies[,'Employees'],na.rm=T)
#industry ==retail
med<- median(companies[companies$Industry=='Retail','Employees'],na.rm=T)
med
# emp ==> na ,industry==> retail store med in emp na
companies[is.na(companies$Employees)& companies$Industry=='Retail','Employees']=med
View(companies)
library(ggplot2)
install.packages("tidyverse")
library(ggplot2)
draw1<- ggplot(airquality,aes(x=Ozone,y=Temp))
source("~/test.R")
library(ggplot2)
draw1<- ggplot(airquality,aes(x=Ozone,y=Temp))
draw1
draw1+geom_point()
clean <- drop_na(airquality)
library(tidyr)
clean <- drop_na(airquality)
library(ggplot2)
library(tidyr)
clean <- drop_na(airquality)
draw1<- ggplot(airquality,aes(x=Ozone,y=Temp))
draw1+geom_point()
library(ggplot2)
library(tidyr)
clean <- drop_na(airquality)
draw1<- ggplot(clean,aes(x=Ozone,y=Temp))
draw1+geom_point()
myData <- read.csv("Titanc.csv")
myData <- read.csv("Titanic.csv")
myData <- read.csv("Titanic.csv")
myData <- read.csv("Titanic.csv")
Data <- read.csv("Titanic.csv")
companies<- read.csv("companies.csv",na.strings = c(''))
setwd("C:/Users/Ayaa Ahmed/Documents")
myData<- read.csv("Titanic.csv")
hist <- ggplt(myData, aes(Age))
hist <- ggplot(myData, aes(Age))
hist+geom_histogram()
hist+geom_histogram(fill="blue")
hist+geom_histogram(fill="blue",color="red")
hist+geom_histogram(fill="blue",color="red",binwidth=8)
hist+geom_histogram(fill="blue",color="red",binwidth=8)+ggtitle("Age of Passengers")
hist+geom_histogram(fill="blue",color="red",binwidth=8)+ggtitle("Age of Passengers")+labs(x="Age",y="Numbers")
hist<- ggplot(myData,aes(x=Survived,fill=gender))
hist+geom_bar()
View(myData)
hist<- ggplot(myData,aes(x=Survived,fill=Sex))
hist+geom_bar()
hist+geom_bar()+theme_light()
hist+geom_bar()
hist+geom_bar()+labs(y="Passenger Count",title="Survival Rate")
hist+geom_bar()+labs(y="Passenger Count",title="Survival Rate")+facet_wrap(~Pclass)
#########################################################################################
data<- read.csv("VADeath.csv")
#########################################################################################
data<- read.csv("VADeaths.csv")
#########################################################################################
data<- read.csv("demographics.csv")
#########################################################################################
data<- read.csv("demographics.csv")
print(class(data))
View(data)
data$total<- rowSums(data)
data<- read.csv("data.csv")
print(class(data))
View(data)
data$total<- rowSums(data)
str(data)
col1<- c(seq(1,5))
col2<- c('z','h','r','a','a')
col3<- c(T,F,F,T,T)
data <- data.frame(col1,col2,col3)
View(data)
mat<- matrix(seq(1,25),nrow=5,byrow=T)
part<- mat[c(1,2,3),c(1,2,3)]
part
hist<- ggplot(myData,aes(x=Survived,fill=Sex))
mat<- matrix(seq(1,25),nrow=5,byrow=T)
mat
part<- mat[c(1,2,3),c(1,2,3)]
part
lengths<- c(2.1,3.4,2.5,2.7,2.9)
diameters <- c(.3,.5,.6,.9,1.1)
v=1
for(i in lenghts){
for(j in diameters){
}
v=i*3.14*((j/2)*(j/2))
print(v)
}
lengths<- c(2.1,3.4,2.5,2.7,2.9)
diameters <- c(.3,.5,.6,.9,1.1)
v=1
for(i in lengths){
for(j in diameters){
}
v=i*3.14*((j/2)*(j/2))
print(v)
}
MinFind<- function(a,b,c){
min=-11111111
if(a<b & a<c)
min=a else
if(b<a & b<c)
min=b  else
if(c<a & c<b)
min=c
return(min)
}
MinFind(2,3,7)
ArrMin <- function(arr=c()){
min=-111111111
for(i in arr){
if(i< min ){
min=i
}
}
return(min)
}
ArrMin(c(1,3,4))
ArrMin <- function(arr=c()){
min=-111111111
for(i in arr){
i
if(i< min ){
min=i
}
}
return(min)
}
ArrMin(c(1,3,4))
ArrMin <- function(arr=c()){
min=-111111111
for(i in arr){
print(i)
if(i< min ){
min=i
}
}
return(min)
}
ArrMin(c(1,3,4))
ArrMin <- function(arr=c()){
min=-111111111
print(arr)
for(i in arr){
if(i < min ){
min=i
}
}
return(min)
}
ArrMin(c(1,3,4))
ArrMin <- function(arr=c()){
min=-111111111
print(class(arr))
for(i in arr){
if(i < min ){
min=i
}
}
return(min)
}
ArrMin(c(1,3,4))
ArrMin <- function(arr=c()){
min=12
for(i in arr){
if(i < min ){
min=i
}
}
return(min)
}
ArrMin(c(1,3,4))
ArrMin <- function(arr=c()){
min=12
for(i in arr){
if(i < min ){
min=i
}
}
return(min)
}
ArrMin(c(1,3,4,-10))
ArrMin <- function(arr=c()){
min=1224905
for(i in arr){
if(i < min ){
min=i
}
}
return(min)
}
ArrMin(c(1,3,4,-10))
ArrMin(c(20,12,15,13,10))
fab <- function(n){
if(n<=1)
return(n)else
return(fab(n-1)+fab(n-2))
}
fab(9)
days<- c(.1,.6,33.8,1.9,9.6,4.3,33.7,.3,0,.1)
m<- mean(days)
print(m)
highest <- max(days)
print(highest)
# Read the Data set
setwd('C:/Users/Ayaa Ahmed/Desktop/امتحان العملي')
G3 <- read.csv('G3_sydney_hobart_times.csv')
View(G3)
# Data Pre_processing and Data Analysis Steps Are :
#########1)Data Collection 2)Data Cleaning 3)Processing 4)Modeling 5)Visualization
# Firstly, I'll Start With Data Cleaning and Data Transformation As I Convert Variables From One Format Or Structure Into Another During My Work To Be Suitable For Analysis And Modeling
#Get The Summary Of Data To Know if there's Incorrect Types
str(G3)
#After Viewing of The Structure of Data set I noticed That Time Variable Needs A lot of Cleaning;
#1) Removing the Text 'day' on Time Variable
G3$Time<- gsub("day",'',G3$Time)
#2)Check It's Type
typeof(G3$Time)       #It Still Character So I'll Convert it into "Double" because it contains Decimal Point
G3$Time <- as.numeric(G3$Time)
typeof(G3$Time)
#3) Now, It's The Time To Complete NAs In Time Variable
# I'll Compute Their Median And Replace NA With The Median Value, With Removing NA From Variable
med<- median(G3[,'Time'],na.rm = T)
# I'll Use is.na To get NA Rows And Filling Them With med Value
G3[is.na(G3$Time),'Time']<-med
#############################"Now Time Variable Is Done Successfully"#########################################################
#Let Us Give A second Look On Dataset after Changes
View(G3)
#Let Us Now Start Working On fleet_start Variable
#4) Sorting it
fleet_start<- G3[order(G3$fleet_start),]
#5) Recoding Fleet_start Column based on Ifelse Condition
G3$Coded_fleet_start<- as.factor(ifelse(G3$fleet_start<=50,"Early Start","Late Start"))
##########################################"Now fleet_start Variable Is Done Successfully"#####################################
#Let Us Give A Third Look On Dataset after Changes
View(G3)
#Let Us Now Start Working On fleet_finish Variable
#6) Recoding fleet_finish Column based on MultiCondition
G3$Coded_fleet_finish[G3$fleet_finish <= 20]<- "Ended Early"
G3$Coded_fleet_finish[G3$fleet_finish > 20&G3$fleet_finish <200]<- "Reasonable End"
G3$Coded_fleet_finish[G3$fleet_finish>= 200]<- "Late End"
#7)Define Ordinal Factor
OrderedFactor<- factor(G3$Coded_fleet_start,ordered=T,levels = c("Early Start","Late Start"))
#8)Compare Between Ordinal Factor elements
ord1<- OrderedFactor[3]
ord2<- OrderedFactor[10]
ord1> ord2
#9)Applying lapply On G3 elements And Get List Of Their Types
ls<- lapply(G3,class)
ls
##########################################"Now fleet_start Variable Is Done Successfully"######################################
#   I'll Now Look If Dataset Contain any more NAs
# Get all Rows That Contain NA
G3[!complete.cases(G3),]
# I noticed That Time.less.than.3 Contains NAs In all Of Its Rows
#10) Complete it Based on Time Variable
G3$Code.Time.less.than.3<-as.factor(ifelse(G3$Time<3,"Yes","No"))
#8) Add Description to Factor Levels
levels(G3$Code.Time.less.than.3)<-c(0,1)
########################################################
#11) Convert Year Var into Vector
year_vec <- c(G3$Year)
print(year_vec)
#12)print Type
typeof(year_vec)
#13)Get Minimum element in the vector
mn <- min(year_vec)
mn
#14)Get Maximum element in the vector
mx<- max(year_vec)
mx
##########################################"Now Time.less.than.3 Variable Is Done Successfully"######################################
#15) Get Mean Of Time Less Than Three and Greater Than Three
m1<- mean(G3$Code.Time.less.than.3==0)
m2<- mean(G3$Code.Time.less.than.3==1)
m1
m2
#16) Get Min Of fleet_start
minimum<- min(G3$fleet_start)
minimum
#17) Get Max Of fleet_finish
maximum <- max(G3$fleet_finish)
maximum
#18) Get Early Start Where Code less Than 3 Partial Data Frame
g3_Part <- G3[G3$Coded_fleet_start=='Early Start'&G3$Code.Time.less.than.3==0,]
View(g3_Part)
#19) Get All Rows Where The Year is 2000 or More
g3_Part_2 <- G3[G3$Year>=2000,]
View(g3_Part_2)
#20) Get fleet Start and fleet end where Coded start is Late Start
g3_Part_3<- G3[G3$Coded_fleet_start=='Late Start',c(3,4,6)]
View(g3_Part_3)
#21)Ordering Data set Based On Year Variable
G3<-G3[order(G3$Year) , ]
#22) Get First 10 rows of data set
head(G3,10)
#23) Get Last 10 rows of data set
tail(G3,10)
###############################################################################
#22)Creating Imputation variable to make prediction the Missing Values
library(mice)
pre.imputation<-mice(g3_Part_3,m=5,meth=c("pmm","pmm","logreg"),maxit = 2)
pre.imputation$imp
###############################################################################################
#23)Get Matrix of only integers
g3_num <- matrix(c(year_vec,G3$fleet_start,G3$fleet_finish))
#22) Get Total Of The Column Sum
tc<- colSums(g3_num)
#24) Get Total Of Row Sums
tr<- rowSums(g3_num)
tc
tr
#########################################Data Visualization###############################################
#Secondly, After I Performed Data Cleaning And Processing As Possible As I could
#Let Us Start Data Visualization Which Is Final Step Of Data Analysis
#25)Display The Relationship between fleet_start and fleet_end using Scatter plot
library(ggplot2)
ScatterPlot<- ggplot(G3,aes(x=fleet_start,y=fleet_finish))
ScatterPlot+geom_point()
#26) Display The Numeric Values For Year
HistoGram<- ggplot(g3_Part_3,aes(fleet_start))+geom_histogram(color='black',fill='red',alpha=0.8)+ggtitle("Fleet Start")
HistoGram
#27) Summarizing Code.Time.less.than.3  Variable 0,1 to Coded fleet_start and coded_fleet_end
BarChart<- ggplot(G3,aes(x=Code.Time.less.than.3,fill=Coded_fleet_start))
BarChart +geom_bar()+labs(y=" Coded Time " )
BarChart +geom_bar() +theme_light()+facet_wrap(~Coded_fleet_finish)
#28) Distribution of Fleet_finish
Sc<- ggplot(g3_Part_3,aes(fleet_start,fleet_finish))
Sc+geom_point(aes(color=Coded_fleet_start))+labs(x="Fleet Start",y="Fleet Finish")+stat_smooth(se=FALSE)
#22) Get First 10 rows of data set
print(head(G3,10))
#23) Get Last 10 rows of data set
print(tail(G3,10))
fleet_start_finish<- G3[order(G3$fleet_start,G3$fleet_finish),]
View(G3)
fleet_start_finish_sorted
fleet_start_finish_sorted<- G3[order(G3$fleet_start,G3$fleet_finish),]
fleet_start_finish_sorted
